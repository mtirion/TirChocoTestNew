name: Create Tag & Release

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:

    # Standard Check of the current git repository
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Setup .NET 6
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    # Install and Setup GitVersion version of 5.3.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    # Execute GitVersion against the current repository
    - name: Use GitVersion
      # Step id is used as reference for the output values
      id: gitversion 
      uses: gittools/actions/gitversion/execute@v0.9.7
    # Echo out the version, helps with quick debugging of the build without having to expand the prior step.
    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    # Create the executable
    # 1. Remove output folder first
    # 2. Build win files and copy in the LICENSE
    # 3. Build linux files and copy in the LICENSE
    - name: Create executables (win & linux)
      run: |
        rm -fr output

        dotnet publish src/TirChocoTestApp -c Release -r win-x64 /p:Version=${{ steps.gitversion.outputs.MajorMinorPatch }} /p:PublishSingleFile=true /p:CopyOutputSymbolsToPublishDirectory=false /p:GenerateDocumentationFile=false --self-contained false -o output/win
        cp LICENSE output/win

        dotnet publish src/TirChocoTestApp -c Release -r linux-x64 /p:Version=${{ steps.gitversion.outputs.MajorMinorPatch }} /p:PublishSingleFile=true /p:CopyOutputSymbolsToPublishDirectory=false /p:GenerateDocumentationFile=false --self-contained true -o output/linux
        cp LICENSE output/win

    # Compress windows executables in release zip
    - name: Create Windows x64 Archive
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        directory: 'output/win'
        filename: '../tools-win-x64.zip'

    # Compress windows executables in release zip
    - name: Create Linux x64 Archive
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        directory: 'output/linux'
        filename: '../tools-linux-x64.zip'

    # Create GitHub release with created zip-files and CHANGELOG
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "output/*.zip"
        bodyFile: "RELEASENOTE.md"
        tag: ${{ steps.gitversion.outputs.MajorMinorPatch }}
        token: ${{ secrets.GITHUB_TOKEN }}

   # Test Chocolatey
    - name: Choco help
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: pack src/nuspec/chocolatey/tirchocotest.nuspec
