name: CD pipeline

# only trigger deployment when PR om main was closed and merged
on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  build:
    # important! this filters only merged PR's, not close without merge
    if: github.event.pull_request.merged == true
    runs-on: windows-latest
    steps:

    # Checkout sources. Depth=0 is for using GitVersion
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Setup .NET 6
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    # Install and Setup GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    # Execute GitVersion against the current repository
    - name: Use GitVersion
      # Step id is used as reference for the output values
      id: gitversion 
      uses: gittools/actions/gitversion/execute@v0.9.7
    # Echo out the version, helps with quick debugging of the build without having to expand the prior step.
    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    # Create the executable
    # 1. Remove output folder first
    # 2. Build win files and copy in the LICENSE
    # 3. Build linux files and copy in the LICENSE
    - name: Create executables (win & linux)
      shell: pwsh
      run: .\tools\deploy.ps1

    # Create GitHub release with created zip-files and CHANGELOG
    #- name: Create release
    #  uses: ncipollo/release-action@v1
    #  with:
    #    artifacts: "output/*.zip"
    #    bodyFile: "RELEASENOTE.md"
    #    tag: ${{ steps.gitversion.outputs.MajorMinorPatch }}
    #    token: ${{ secrets.GITHUB_TOKEN }}
